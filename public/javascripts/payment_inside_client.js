let SUPPORTED_TYPES="AmericanExpress,JCB,Visa,MasterCard,Discover";

function forwardCallbackURL(response) {
	var callbackUrl = "/payment_result?";
	for(id in response) {
		callbackUrl = callbackUrl+id+"="+encodeURIComponent(response[id])+"&";		
	}
    console.log(callbackUrl);
	window.location.replace(callbackUrl);
} 

var callback = function (response) {
    if(response.responseFrom == "Response_From_Submit_Page") {
    	if(response.success) {
        	// Submitting hosted page succeeds. Business logic code may be added here. Simply forward to the callback url in sample code.
        	forwardCallbackURL(response);
        } else {
            // Submitting hosted page fails. Error handling code should be added here. Simply forward to the callback url in sample code.
            forwardCallbackURL(response);
        }
    } else if (response.responseFrom == "Response_From_3D_Validation") {
		// Requesting hosted page fails. Error handling code should be added here. Simply forward to the callback url in sample code.
		console.log("In Sample Code: \n ThreeDSResult:" + response.ThreeDSResult
				+ "\n AuthorizeResult: " + response.AuthorizeResult + "\n threedPaymentMethodId: "
				+ response.threedPaymentMethodId + "\n AuthTransactionId: "
				+ response.AuthTransactionId + "\n ECI: " + response.ECI
				+ "\n XID: " + response.XID
				+ "\n CAVV: " + response.CAVV
				+ "\n field_passthrough1: " + response.field_passthrough1
				+ "\n field_passthrough2: " + response.field_passthrough2);
		
		forwardCallbackURL(response);
	} else {
    	// Requesting hosted page fails. Error handling code should be added here. Simply forward to the callback url in sample code.
    	forwardCallbackURL(response);
    }
};

var errorMessageCallback = function(key, code, message) {
	var errorMessage = message;

	switch(key) {
		// Overwrite error messages generated by client-side validation.
		case "creditCardNumber":
			if(code == '001') {
				errorMessage = 'Card number required. Please input firstly.';
			}else if(code == '002') {
				errorMessage = 'Number does not match credit card. Please try again.';
			}
			break;
		case "cardSecurityCode":
			break;
		case "creditCardExpirationYear":
			break;
		case "creditCardExpirationMonth":
			break;
		case "creditCardType":
			break;	
			
		// Overwrite error messages generated by server-side validation.	
		case "error":
			if(errorMessage==="[Attempt_Exceed_Limitation] Attempt exceed the limitation, refresh page to try again."){
				const attemptexceed = document.getElementById("attemptexceed");
				attemptexceed.style.display = "block";
				setTimeout(function() { window.location.reload(); }, 5000);
			}
			// errorMessage ="Validation failed on server side, Please check your input firstly.";
			break;
	}
	
	Z.sendErrorMessageToHpm(key, errorMessage);	
	
	return;
};

function loadPaymentPages(data, prepopulateFields, req) {
	hideAgree();
    var params = {};
    params["token"] = data.token
    params["signature"] = data.signature;
    params["key"] = data.key;
    params["tenantId"] = data.tenantId;
    params["id"] = data.pageId;
    params["param_supportedTypes"]=SUPPORTED_TYPES;
    params["url"] = data.url;

	// Please note that we need to send parameters according to our requiement.
	// For 3DS test
	// params["authorizationAmount"] = 12;
	// params["field_accountId"] = "402880e981f2e24f0181f30c388f0052";
	// params["field_passthrough1"] = "Test_Value_Passthrough1";
	// params["paymentGateway"]="BlueSnap";
	// params["currency"] = "USD";
	// Page Id is required to Regenerate signature and token, and regenerate signature is required when reCAPTCHA function is enabled and when submit failed in button out model.
	// params["field_passthrough3"] = data.pageId;
	// params.put("currency", "GBP");

	if(req.integrationtype === "onSessionPayment"){
		if(req.storepm === "on"){
            params["storePaymentMethod"] = "true";
          }else{
            params["storePaymentMethod"] = "false";
          }
		params["doPayment"] = "true";
        params["field_accountId"] = req.accountid;
		params["authorizationAmount"] = req.pmamount;
	    params["currency"] = "USD";
	}

	if(req.pagetype ==='overlay') {
		params["style"]="overlay";
	}else {
		params["style"]="inline";
	}

	params["submitEnabled"]="true";
	Z.renderWithErrorHandler(params,prepopulateFields,callback,errorMessageCallback);
}

function agree() {
	if(document.getElementById("agreement").checked) {
		Z.setAgreement("External","Recurring",SUPPORTED_TYPES,"")
	}
	else Z.setAgreement("","","","")
}

function hideAgree() {
	if(req.pagetype.split('-').at(-1)==='legacy' || req.pagetype==='overlay')
		document.getElementById("checkBoxDiv").style.display='none';
}

/**
 * javascript method for button outside of iframe
 * @returns 
 */
function submitPage() {
	Z.submit();
	return false;
}

function submitSucceed() {
	document.getElementById("submitButton").disabled = true;
}